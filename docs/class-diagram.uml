@startuml

namespace std {
	class "vector\ndeque\nlist\nset\nmultiset\nunordered_set\nunordered_multiset<T>" as ArrayBase
	class "map\nunordered_map<std::string, T>" as MapBase
}

namespace Polymorphic {
	class "Vector\nDeque\nList\nSet\nMultiset\nUnorderedSet\nUnorderedMultiset<T>" as ArrayBase
	class "Map\nUnorderedMap<std::string, T>" as MapBase
	ArrayBase *-> std.ArrayBase
	MapBase *-> std.MapBase
}

Polymorphic -[hidden]down- std

namespace JXXON {
	class Json {
		+get<T>(name) : T
		+set(name, value)
	}
	
	interface "Json::Serializable" as Json_Serializable {
		+toJson() : Json
	}
	Json_Serializable --+ Json
	
	interface Serializable << typedef >>
	Serializable ..> Json_Serializable

	interface "Json::ArrayType<T>" as Json_ArrayType {
		+addElement(T)
		+forEach(std::function<void(T)>)
	}
	Json_ArrayType --+ Json
	
	interface "Json::MapType<T>" as Json_MapType {
		+addElement(std::string, T)
		+forEach(std::function<void(std::string, T)>)
	}
	Json_MapType --+ Json
	
	class "Base::Vector\nBase::Deque\nBase::List\nBase::Set\nBase::Multiset\nBase::UnorderedSet\nBase::UnorderedMultiset<T>" as ArrayBase
	class "Base::Map\nBase::UnorderedMap<T>" as MapBase
	ArrayBase --|> Polymorphic.ArrayBase
	ArrayBase --|> JXXON.Json_ArrayType
	MapBase --|> Polymorphic.MapBase
	MapBase --|> JXXON.Json_MapType

	class "Json::Array" as Json_Array<T, Base> {
		+Json::Array::Array(Json)
		+toJson() : Json
	}
	Json_Array --+ Json
	Json_Array -right-|> Json_Serializable
	Json_Array --|> ArrayBase
	
	class Vector<T> << typedef >>
	Vector ..> Json_Array : <T, Base::Vector>
	
	class Deque<T> << typedef >>
	Deque ..> Json_Array : <T, Base::Deque>
	
	class List<T> << typedef >>
	List ..> Json_Array : <T, Base::List>
	
	class Set<T> << typedef >>
	Set ..> Json_Array : <T, Base::Set>
	
	class Multiset<T> << typedef >>
	Multiset ..> Json_Array : <T, Base::Multiset>
	
	class UnorderedSet<T> << typedef >>
	UnorderedSet ..> Json_Array : <T, Base::UnorderedSet>
	
	class UnorderedMultiset<T> << typedef >>
	UnorderedMultiset ..> Json_Array : <T, Base::UnorderedMultiset>
	
	class "Json::Map" as Json_Map<T, Base> {
		+Json::Map::Map(Json)
		+toJson() : Json
	}
	Json_Map --+ Json
	Json_Map -left-|> Json_Serializable
	Json_Map --|> MapBase
	
	class Map<T> << typedef >>
	Map ..> Json_Map : <T, Base::Map>
	
	class UnorderedMap<T> << typedef >>
	UnorderedMap ..> Json_Map : <T, Base::UnorderedMap>
	
	namespace Accessor {
		class GetProperty<T> {
			+operator()() : T
		}
		JXXON.Json --> GetProperty
		
		class SetProperty<T> {
			+operator()(T)
		}
		JXXON.Json --> SetProperty
		
		class GetArrayElements<T> {
			+operator()(Json::ArrayType)
		}
		JXXON.Json_Array --> GetArrayElements
		
		class SetArrayElements<T> {
			+operator()(Json::ArrayType)
		}
		JXXON.Json_Array --> SetArrayElements

		class GetMapElements<T> {
			+operator()(Json::MapType)
		}
		JXXON.Json_Map --> GetMapElements
		
		class SetMapElements<T> {
			+operator()(Json::MapType)
		}
		JXXON.Json_Map --> SetMapElements
	}
}

@enduml
